#!/usr/bin/python3



.staging-variables:
  variables:
    API: $STAGING_API
    EMAIL: $EMAIL_STAGING
    PASSWORD: $PASSWORD_STAGING
    IMAGE_TAG: "develop"

.staging2-variables:
  variables:
    API: $STAGING2_API
    EMAIL: $EMAIL_STAGING2
    PASSWORD: $PASSWORD_STAGING2
    IMAGE_TAG: "staging2"

.production-variables:
  variables:
    API: $PRODUCTION_API
    EMAIL: $EMAIL_PROD
    PASSWORD: $PASSWORD_PROD
    IMAGE_TAG: "master"

stages:
  - prepare
  - test
  - deploy

variables:
    LIBRARY_LOADER_VERSION: latest
    IMAGE_NAME: "fra.ocir.io/fr1gfcijhydg/nimbus/library.loader"
    CMD: "library-update"
    DIR_TO_LIBRARY_UPDATE: ".nimbus-library"
    STAGING_API: "https://staging.api.cognimbus.com"
    STAGING2_API: "https://staging2.api.cognimbus.com"
    PRODUCTION_API: "https://api.cognimbus.com"
    DEVICE_DIR: "./"

create directory for modified components:
  tags:
    - docker
  stage: prepare
  only:
    - master
  allow_failure: false
  image: python:3.10
  script:
    - pwd
    - git fetch --all
    - echo compare current branch with last commit
    - python3 .filter_only_updated_items.py --dir-name $DIR_TO_LIBRARY_UPDATE
    - ls $DIR_TO_LIBRARY_UPDATE -la
    - ls $DIR_TO_LIBRARY_UPDATE -la
  artifacts:
    paths:
      - "$DIR_TO_LIBRARY_UPDATE"
    expire_in: 1 hrs

test components - staging:
  tags:
    - docker
  stage: test
  image: $IMAGE_NAME:$IMAGE_TAG
  variables: !reference [.staging-variables, variables]
  allow_failure: false
  when: always
  script:
    - ls -la
    - ${CMD} $DEVICE_DIR -c -a -env $API -email $EMAIL -password $PASSWORD -v

test components - staging2:
  tags:
    - docker
  stage: test
  image: $IMAGE_NAME:$IMAGE_TAG
  variables: !reference [.staging2-variables, variables]
  allow_failure: false
  when: always
  script:
    - ls -la
    - ${CMD} $DEVICE_DIR -c -a -env $API -email $EMAIL -password $PASSWORD -v

test components - production:
  tags:
    - docker
  stage: test
  image: $IMAGE_NAME:$IMAGE_TAG
  variables: !reference [.production-variables, variables]
  allow_failure: false
  when: always
  script:
    - ls -la
    - ${CMD} $DEVICE_DIR -c -a -env $API -email $EMAIL -password $PASSWORD -v


deploy modified components - staging:
  tags:
    - docker
  stage: deploy
  image: $IMAGE_NAME:$IMAGE_TAG
  needs: [create directory for modified components, test components - staging]
  dependencies:
    - create directory for modified components
  variables: !reference [.staging-variables, variables]
  only:
    - master
  script:
    - echo "selected API=${API}"
    - ${CMD} $DIR_TO_LIBRARY_UPDATE -c -a -env $API -email $EMAIL -password $PASSWORD

deploy modified components - staging2:
  tags:
    - docker
  stage: deploy
  image: $IMAGE_NAME:$IMAGE_TAG
  needs: [create directory for modified components, test components - staging2]
  dependencies:
    - create directory for modified components
  variables: !reference [.staging2-variables, variables]
  only:
    - master
  script:
    - echo "selected API=${API}"
    - ${CMD} $DIR_TO_LIBRARY_UPDATE -c -a -env $API -email $EMAIL -password $PASSWORD

deploy modified components - production:
  tags:
    - docker
  stage: deploy
  image: $IMAGE_NAME:$IMAGE_TAG
  needs: [create directory for modified components, test components - production]
  dependencies:
    - create directory for modified components
  variables: !reference [.production-variables, variables]
  only:
    - master
  script:
    - echo "selected API=${API}"
    - ${CMD} $DIR_TO_LIBRARY_UPDATE -c -a -env $API -email $EMAIL -password $PASSWORD


deploy all library - staging:
  tags:
    - docker
  stage: deploy
  image: $IMAGE_NAME:$CI_COMMIT_BRANCH
  needs: [ test components - staging ]
  variables: !reference [.staging-variables, variables]
  when: manual
  only:
    - master
  script:
    - ${CMD} $DEVICE_DIR -c -a -env $API -email $EMAIL -password $PASSWORD

deploy all library - staging2:
  tags:
    - docker
  stage: deploy
  image: $IMAGE_NAME:$CI_COMMIT_BRANCH
  needs: [ test components - staging2 ]
  variables: !reference [.staging2-variables, variables]
  when: manual
  only:
    - master
  script:
    - ${CMD} $DEVICE_DIR -d -c -env $API -email $EMAIL -password $PASSWORD

deploy all library - production:
  tags:
    - docker
  stage: deploy
  image: $IMAGE_NAME:$CI_COMMIT_BRANCH
  needs: [ test components - production ]
  variables: !reference [.production-variables, variables]
  when: manual
  only:
    - master
  script:
    - ${CMD} $DEVICE_DIR -c -a -env $API -email $EMAIL -password $PASSWORD
